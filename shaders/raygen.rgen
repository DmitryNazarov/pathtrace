#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform UBO
{
	mat4 viewInverse;
	mat4 projInverse;
	uint pointLightsNum;
	uint directLightsNum;
} ubo;
layout(location = 0) rayPayloadEXT RayPayload rayPayload;
layout(constant_id = 0) const int MAX_RECURSION = 0;

void main()
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
	vec2 d = vec2(inUV.x * 2.0 - 1.0, 1.0 - 2.0 * inUV.y);

	vec4 origin = ubo.viewInverse * vec4(0, 0, 0, 1);
	vec4 target = ubo.projInverse * vec4(d.x, d.y, 1, 1);
	vec4 direction = normalize(ubo.viewInverse * vec4(normalize(target.xyz / target.w), 0));

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	float tmin = 0.001;
	float tmax = 10000.0;

	vec3 color = vec3(0.0f);
	vec3 specular = vec3(1.0f);
	for (int i = 0; i < MAX_RECURSION; ++i)
	{
		traceRayEXT(topLevelAS,     // acceleration structure
					rayFlags,       // rayFlags
					0xFF,           // cullMask
					0,              // sbtRecordOffset
					0,              // sbtRecordStride
					0,              // missIndex
					origin.xyz,     // ray origin
					tmin,           // ray min range
					direction.xyz,  // ray direction
					tmax,           // ray max range
					0               // payload (location = 0)
		);

		color += specular * rayPayload.color;

		if (rayPayload.specular == vec3(0.0f))
		{
			break;
		}

		specular = rayPayload.specular;
		direction.xyz = normalize(reflect(direction.xyz, rayPayload.normal.xyz));
		origin.xyz = compensateFloatRoundingError(rayPayload.intersectionPoint, direction.xyz, rayPayload.normal.xyz);
	}

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 0.0));
}
