#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform UBO
{
	mat4 viewInverse;
	mat4 projInverse;
	uint pointLightsNum;
	uint directLightsNum;
	uint quadLightsNum;
	uint lightsamples;
	uint lightstratify;
	uint spp;
} ubo;
layout(location = 0) rayPayloadEXT RayPayload rayPayload;
layout(constant_id = 0) const int MAX_RECURSION = 0;


uint rngState = gl_LaunchSizeEXT.x * gl_LaunchIDEXT.y + gl_LaunchIDEXT.x;  // Initial seed

void main()
{
	vec4 origin = ubo.viewInverse * vec4(0.0f, 0.0f, 0.0f, 1.0f);

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	float tmin = 0.001f;
	float tmax = 10000.0f;

	vec3 color = vec3(0.0f);
	vec3 attenuation = vec3(1.0f);

	for (int i = 0; i < ubo.spp; ++i)
	{
		float u1 = stepAndOutputRNGFloat(rngState);
		float u2 = stepAndOutputRNGFloat(rngState);
		const vec2 pixelCenter = gl_LaunchIDEXT.xy + vec2(u1, u2);
		const vec2 inUV = pixelCenter / gl_LaunchSizeEXT.xy;
		vec2 d = vec2(inUV.x * 2.0f - 1.0f, 1.0f - 2.0f * inUV.y);
		vec4 target = ubo.projInverse * vec4(d.x, d.y, 1.0f, 1.0f);
		vec4 direction = normalize(ubo.viewInverse * vec4(normalize(target.xyz / target.w), 0.0f));

		for (int j = 0; j < MAX_RECURSION; ++j)
		{
			traceRayEXT(topLevelAS,     // acceleration structure
						rayFlags,       // rayFlags
						0xFF,           // cullMask
						0,              // sbtRecordOffset
						0,              // sbtRecordStride
						0,              // missIndex
						origin.xyz,     // ray origin
						tmin,           // ray min range
						direction.xyz,  // ray direction
						tmax,           // ray max range
						0               // payload (location = 0)
			);

			color += attenuation * rayPayload.color;
			if (rayPayload.specular.x < 0.01f && rayPayload.specular.y < 0.01f && rayPayload.specular.z < 0.01f)
			{
				break;
			}

			attenuation *= rayPayload.specular;
			direction.xyz = normalize(reflect(direction.xyz, rayPayload.normal.xyz));
			origin.xyz = rayPayload.intersectionPoint;
		}
	}

	// rounding for edx grade system
	float r = int(floor(min(color.r, 1.0f) * 256.0f)) / 256.0f;
	float g = int(floor(min(color.g, 1.0f) * 256.0f)) / 256.0f;
	float b = int(floor(min(color.b, 1.0f) * 256.0f)) / 256.0f;
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(r, g, b, 0.0f));
}
