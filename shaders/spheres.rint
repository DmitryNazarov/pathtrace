#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_nonuniform_qualifier : enable


struct Sphere
{
  vec3 pos;
  float radius;
  mat4 transform, invertedTransform;
};
layout(binding = 5, set = 0) buffer Spheres { Sphere s[]; } spheres;


struct Ray
{
  vec3 origin;
  vec3 direction;
};

// Ray-Sphere intersection
// http://viclw17.github.io/2018/07/16/raytracing-ray-sphere-intersection/
float hitSphere(const Sphere s, const Ray r)
{
  vec3  oc           = r.origin - s.pos;
  float a            = dot(r.direction, r.direction);
  float b            = 2.0 * dot(oc, r.direction);
  float c            = dot(oc, oc) - s.radius * s.radius;
  float discriminant = b * b - 4 * a * c;
  if(discriminant < 0)
  {
    return -1.0;
  }
  else
  {
    return (-b - sqrt(discriminant)) / (2.0 * a);
  }
}

// // Ray-AABB intersection
// float hitAabb(const Aabb aabb, const Ray r)
// {
//   vec3  invDir = 1.0 / r.direction;
//   vec3  tbot   = invDir * (aabb.minimum - r.origin);
//   vec3  ttop   = invDir * (aabb.maximum - r.origin);
//   vec3  tmin   = min(ttop, tbot);
//   vec3  tmax   = max(ttop, tbot);
//   float t0     = max(tmin.x, max(tmin.y, tmin.z));
//   float t1     = min(tmax.x, min(tmax.y, tmax.z));
//   return t1 > max(t0, 0.0) ? t0 : -1.0;
// }

void main()
{
  Ray ray;
  ray.origin    = gl_WorldRayOriginEXT;
  ray.direction = gl_WorldRayDirectionEXT;

  float tHit = hitSphere(spheres.s[gl_PrimitiveID], ray);
  if(tHit > 0)
  {
    reportIntersectionEXT(tHit, 0);
  }
}